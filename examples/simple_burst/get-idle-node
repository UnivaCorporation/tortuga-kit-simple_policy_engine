#!/usr/bin/env python

# Copyright 2008-2018 Univa Corporation
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import subprocess
import os
import sys

from tortuga.softwareprofile.softwareProfileFactory \
    import getSoftwareProfileApi
from tortuga.cli.tortugaCli import TortugaCli

# I've yet to encounter a version of Python that does not include the
# compiled version of 'xml.etree.ElementTree', but just in case...

try:
    import xml.etree.cElementTree as ET
except ImportError:
    import xml.etree.ElementTree as ET


# !!!! DO NOT EDIT BELOW THIS LINE !!!!


class GetIdleNodeCli(TortugaCli):
    def __init__(self):
        super(GetIdleNodeCli, self).__init__(validArgCount=1)

        self.api = getSoftwareProfileApi()

    def parseArgs(self):
        # Both of these option are currently ignored
        self.addOption('--polling-interval', type='int',
                       help='(ignored)')

        self.addOption('--ttl', type='int',
                       help='(ignored)')

        # Required argument
        self.addOption('--software-profile', metavar='NAME',
                       help='Check for idle nodes in software profile')

        super(GetIdleNodeCli, self).parseArgs(
            '{} --software-profile <NAME>'.format(
                os.path.basename(sys.argv[0])))

    def runCommand(self):
        self.parseArgs()

        if not self.getOptions().software_profile:
            self.getParser().error(
                'Missing required --software-profile argument')

            sys.exit(1)

        eligible_nodes = [node.getName()
                          for node in self.api.getNodeList(
                              self.getOptions().software_profile)
                          if not node.getIsIdle() and \
                          node.getState() not in ('Deleted')]

        if not eligible_nodes:
            # No nodes known to Tortuga that are eligible for idling
            sys.exit(0)

        unused_nodes = self.get_unused_nodes()

        # Determine nodes eligible for idling
        idle_candidates = set(eligible_nodes) & unused_nodes

        if not idle_candidates:
            sys.exit(0)

        print '\n'.join([node for node in idle_candidates])

    def get_unused_nodes(self): \
            # pylint: disable=no-self-use
        """
        Use UGE 'qstat' to determine which nodes have running jobs
        """

        devnull = open(os.devnull, 'w')

        unused_nodes = set()

        slot_usage = {}

        try:
            fp = subprocess.Popen('qstat -f -xml', stdout=subprocess.PIPE,
                                  stderr=devnull, shell=True, bufsize=1)

            try:
                et = ET.parse(fp.stdout)

                for element in et.findall('.//queue_info/Queue-List'):
                    queue_tuple = element.find('name').text.split('@')

                    slots_used = int(element.find('slots_used').text)

                    hostname = queue_tuple[1]

                    if hostname not in slot_usage:
                        slot_usage[hostname] = slots_used
                    else:
                        slot_usage[hostname] += slots_used

                unused_nodes = set([hostn for hostn, slots_in_use in
                                    slot_usage.iteritems()
                                    if slots_in_use == 0])
            except ET.ParseError:
                # Malformed response from 'qstat' (qmaster is inaccessible)
                pass
        finally:
            devnull.close()

        return unused_nodes


if __name__ == '__main__':
    GetIdleNodeCli().run()
